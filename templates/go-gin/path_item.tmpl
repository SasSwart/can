package {{ index .GetMetadata "package" }}

import (
	"github.com/gin-gonic/gin"
	"net/http"
)

// GENERATED INTERFACE. DO NOT EDIT

type {{ .GetName }} interface {
{{- range $name, $operation := .Operations }}
  {{ $operation.GetName }}(*gin.Context, *{{ $operation.GetName }}Parameters, *{{ $operation.RequestBody.GetName }}) {{ $operation.GetName }}Response
{{- end }}
	InvalidRequest(*gin.Context, error)
}

{{ $pathItemStructName := printf "Unimplemented%s" .GetName -}}
type {{ $pathItemStructName }} struct {}

{{- range $name, $operation := .Operations }}
func (u {{ $pathItemStructName }}) {{ $operation.GetName }}(*gin.Context, *{{ $operation.GetName }}Parameters, *{{ $operation.RequestBody.GetName }}) {{ $operation.GetName }}Response {
	return {{ $operation.GetName }}405Response{}
}
{{- end }}
func (u {{ $pathItemStructName }}) InvalidRequest(c *gin.Context, err error) {
	c.JSON(400, err.Error())
	c.Abort()
}

func Register{{ .GetName }}Path(e gin.IRouter, srv {{ .GetName }}) {
{{- range $name, $operation := .Operations }}
	{{ $parent := .GetParent }}
  e.{{ $name | ToUpper }}("{{ $parent.GetPath }}", func(c *gin.Context) {
  	params := &{{ $operation.GetName }}Parameters{}
    {{- range $param := $operation.Parameters }}
		params.{{ $param.Name | ToTitle }} =
			{{- if eq $param.In "path" }} c.Param("{{ $param.Name }}") {{- end -}}
			{{- if eq $param.In "query" }} c.Query("{{ $param.Name }}") {{- end }}
  	{{- end }}

		if ok, err := params.IsValid(); ok {
			c.JSON(http.StatusBadRequest, err)
			return
		}

  	var body *{{ $operation.RequestBody.GetName }}
  	{{- if ne (index $operation.RequestBody.Content "application/json") nil}}
		body = &{{ $operation.RequestBody.GetName }}{}
		err := c.ShouldBindJSON(body)
		if err != nil {
			srv.InvalidRequest(c, err)
		}
	{{- end }}

    if ok, err := body.IsValid(); ok {
        c.JSON(http.StatusBadRequest, err)
        return
    }
    response := srv.{{ $operation.GetName }}(c, params, body)
    c.JSON(response.GetStatus(), response)
  })
{{- end }}
}

{{- range $name, $operation := .Operations }}
type {{ $operation.GetName }}Response interface {
	GetStatus() int
}

{{- range $name, $response := .Responses }}
{{ $statusCode := $name }}
{{- range $name, $content := $response.Content }}
type {{ $response.GetName }} {{ $content.Schema.GetName }}

func ({{ $response.GetName }}) GetStatus() int {
	return {{ $statusCode }}
}
{{- end }}
{{- end }}
type {{ $operation.GetName }}405Response struct {}
func ({{ $operation.GetName }}405Response) GetStatus() int {
	return 405
}

{{- end }}
