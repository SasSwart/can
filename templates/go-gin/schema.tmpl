package {{ index .GetMetadata "package" }}


{{- $needs_fmt := false }}
{{- $needs_regexp := false }}

{{- range $name, $property := .Properties }}
{{- if ne $property.MinLength 0 }}{{ $needs_fmt = true }}{{- end }}
{{- if ne $property.MaxLength 0 }}{{ $needs_fmt = true }}{{- end }}
{{- if ne $property.Pattern "" }}{{ $needs_regexp = true }}{{- end }}
{{- end }}

{{ if $needs_fmt -}} import "fmt" {{- end }}
{{ if $needs_regexp -}} import "regexp" {{- end }}

// GENERATED MODEL. DO NOT EDIT
{{ if ne .Description "" }}
// {{ .GetName | SanitiseName }} description:
// {{ .Description }}
{{- end }}
type {{ .GetName | SanitiseName }} {{ . | SanitiseType }}
{{- if eq ( . | SanitiseType) "struct" }} {
	{{- range $name, $schema := .Properties }}
        {{ if eq ($schema | SanitiseType) "struct" -}}
            {{ $name | ToTitle }} {{ $schema.GetName | SanitiseName }}
        {{- else -}}
            {{ $name | ToTitle }} {{ $schema | SanitiseType }} `json:"{{ $name }}"`
        {{- end }}
	{{- end }}
}

func (p *{{ .GetName | SanitiseName }}) IsValid() (bool, error) {
	{{- range $name, $property := .Properties }}
	{{- if ne $property.MinLength 0 }}
	if len(p.{{ $name | ToTitle }}) < {{ $property.MinLength }} {
	return false, fmt.Errorf("p.{{ $name | ToTitle }} too short")
	}
	{{- end }}

	{{- if ne $property.MaxLength 0 }}
	if len(p.{{ $name | ToTitle }}) > {{ $property.MaxLength }} {
	return false, fmt.Errorf("p.{{ $name | ToTitle }} too long")
	}
	{{- end }}

	{{- if ne $property.Pattern "" }}
	// Regular expressions are checked for compilation during code generation
	// No need to check them here.
	r{{ $name | ToTitle }}, _ := regexp.Compile(`{{ $property.Pattern }}`)
	if !r{{ $name | ToTitle }}.MatchString(p.{{ $name | ToTitle }}) {
			return false, fmt.Errorf("p.{{ $name | ToTitle }} did not pass validation pattern")
	}
	{{- end }}
	{{- end }}

	return true, nil
}

{{- end }}
