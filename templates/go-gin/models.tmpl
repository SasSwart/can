// GENERATED CODE. DO NOT EDIT

package models

import (
	"fmt"
	"regexp"
)

{{ range .ServerInterface.Models }}

type {{ .Name }} struct {
	{{- range $name, $schema := .Properties }}
	{{ $name | Sanitize | ToTitle }} *{{ $schema.Type }} `json:"{{ $name }}"`
	{{- end }}
}

func (model {{ .Name }})IsValid() error {
	{{- range $name, $schema := .Properties }}
	{{- $modelName := printf "%s%s" "model." ( $name | Sanitize | ToTitle ) -}}
	{{- if eq $schema.Required true }}
	if {{ $modelName }} == nil {
	    return fmt.Errorf("{{ $modelName }} is required")
	}
	{{- end }}

	{{- if eq $schema.Type "string" }}

	{{- if ne $schema.MinLength 0 }}
	if {{ $modelName }} != nil && len(*{{ $modelName }}) < {{ $schema.MinLength }} {
		return fmt.Errorf("{{ $modelName }} too short")
	}
	{{- end }}

	{{- if ne $schema.MaxLength 0 }}
	if {{ $modelName }} != nil && len(*{{ $modelName }}) > {{ $schema.MaxLength }} {
		return fmt.Errorf("{{ $modelName }} too long")
	}
	{{- end }}

	{{- if ne $schema.Pattern "" }}
	// Regular expressions are checked for compilation during code generation
	// No need to check them here.
	r{{ $name | Sanitize | ToTitle }}, _ := regexp.Compile("{{ $schema.Pattern }}")
	if {{ $modelName }} != nil && !r{{ $name | Sanitize | ToTitle }}.MatchString(*{{ $modelName }}) {
		return fmt.Errorf("model.{{ $name | Sanitize | ToTitle }} did not pass validation pattern")
	}
	{{- end }}

	{{- end }}
	{{- end }}

	return nil
}
{{ end }}