package {{ index .GetMetadata "package" }}

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
)

{{- range $name, $operation := .Operations }}
func {{ $operation.GetName | SanitiseName }}(config ApiConfig, params *{{ $operation.GetName | SanitiseName }}Parameters, body *{{ $operation.RequestBody.GetName | SanitiseName }}) {
	requestURL := fmt.Sprintf("%s://%s:%d", config.Protocol, config.Host, config.Port)
	req, err := http.NewRequest(http.Method{{ $name | ToTitle }}, requestURL, nil)
	if err != nil {
		fmt.Printf("client: could not create request: %s\n", err)
		os.Exit(1)
	}

	res, err := http.DefaultClient.Do(req)
	defer res.Body.Close()
	if err != nil {
		fmt.Printf("client: error making http request: %s\n", err)
		os.Exit(1)
	}

	resBody, err := ioutil.ReadAll(res.Body)
	if err != nil {
		fmt.Printf("client: could not read response body: %s\n", err)
		os.Exit(1)
	}
}
{{- end }}