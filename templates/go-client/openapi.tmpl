package {{ index .GetMetadata "package" }}

import (
    "context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
)

// ClientService defines this packages public api
type ClientService interface {
    {{- range $pathName, $path := .Paths }}
    {{- range $name, $operation := $path.Operations }}
    {{ $operation.GetName | SanitiseName }}(context.Context, *{{ $operation.GetName | SanitiseName }}Parameters, *{{ $operation.RequestBody.GetName | SanitiseName }}) (*http.Response, error)
    {{- end }}
    {{- end }}
}

// Doer defines the one behavioural trait required for a custom client to function within the generated methods
// implemented by this client.
type Doer interface {
	Do(r *http.Request) (*http.Response, error)
}

// We must satisfy this interface for the client to be valid. This is a compile time assertion that should not be
// removed.
var _ ClientService = &Client{}

// AuthFunc needs to be passed in as a closure at client generation and allows for authentication to be applied to any
// request being made. It should contain any logic and data needed to apply and maintain authentication with a server.
type AuthFunc func(*http.Request) error

// Config allows you to specify the Host, Protocol, Content Type and optionally a Port when initialising this client.
// It should only be used once, when calling NewClient.
type Config struct {
    // this url prefixes all path variants defined in the API schema
    BaseUrl string
    // not present in url if not set
    Port int

    // defaults to "content-type: application/json" if not set
	ContentType string
	Debug bool
}

type Client struct {
    // settable through the use of SetClient(). Defaults to http.DefaultClient if not set
    internalClient Doer

    // contains initialisation fields for use when making calls
    cfg *Config

    // auth is run directly before all `<client>.Do(req)` calls in order to apply user-defined auth to the request.
    // If not set, no auth is applied
	auth AuthFunc
}

// createUrl simply appends the sub-path and query parameters to the base url, building a full url for use by the client
func (c *Client) createUrl(pathPattern string, vals url.Values) (string, error) {
	port := c.cfg.Port
	url := c.cfg.BaseUrl
	if port != 0 {
		portString := strconv.Itoa(port)
		url = url + ":" + portString
	}
	url = url + pathPattern  + vals.Encode()
	return url, nil
}

// NewClient allows you to specify configuration of your client. This function allows you to specify optional
// auth steps that will be executed before a request is made, such as the attaching of an Authorization header to the
// request, as well as the http.Client you intend to use to make the calls. See the config struct for an idea of what it
// allows you to configure.
func NewClient(cfg *Config, client Doer, af AuthFunc) (*Client, error) {
    if cfg == nil {
          return nil, errors.New("cannot start client without config")
    }
    var internalClient Doer
    internalClient = http.DefaultClient
    if client != nil {
        internalClient = client
    }
    c := &Client{
        internalClient: internalClient,
        cfg: cfg,
        auth: af,
    }
    return c, nil
}
